{"version":3,"sources":["boxes/boxes.js","App.js","serviceWorker.js","index.js"],"names":["Boxes","props","react_default","a","createElement","className","console","log","map","column","singleColumn","row","arr","type","onChange","Validate","name","key","min","max","box","App","errors","errorsDiv","document","checker","n","rc","unique","sub","item","i","includes","Object","toConsumableArray","Set","filter","length","_this","rowAndColumnChecker","RC","k","j","num","push","parseInt","boxesChecker","ar","B","boxNo","forEach","b","getValues","sudokoValues","input","querySelectorAll","concat","value","onValidate","e","time","preventDefault","sudoko","innerHTML","timeEnd","boxes_boxes","this","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1c2e90a.chunk.js","sourcesContent":["import React from 'react' ;\n\n\nconst box = (props) =>{\n    console.log(props);\n\n    let columns = [1,2,3,4,5,6,7,8,9];\n    let boxes = columns.map(column =>{\n        let rows = [1,2,3,4,5,6,7,8,9];\n        let singleColumn = rows.map(row =>{\n            let arr = [column, row]\n            return (\n                <input type=\"number\" onChange={props.Validate} name={arr} key={arr} min=\"1\" max=\"9\"></input>\n            )\n\n        })\n        return (<div key={column} className=\"sudoko_row\">{singleColumn}</div>)\n\n    }) \n    return boxes\n}\n\nconst Boxes = (props) => {\n    return(\n        <div className=\"sudoko\">{box(props)}</div>\n    )\n}\n\nexport default Boxes\n","import React, { Component } from 'react';\nimport Boxes from './boxes/boxes';\n\n\nclass App extends Component {\n\n  errors = '';\n   errorsDiv = document.createElement('div');\n\n\n\n  checker = (arr, n, rc) => {\n    let unique =  arr;\n    let sub = 'th';\n    unique = unique.map((item,i) => unique.includes(item, i+1) ? item : '' );\n    unique = [...new Set(unique)].filter(n => n);\n    if(unique.length){\n      sub = (n === 1) ? 'st' : (n === 2) ? 'nd' : (n === 3) ? 'rd' : 'th' ;\n      this.errors += ' error in ' + n + sub+' '+ rc + `</br>`;\n    //  console.log(' error in ' + n + 'th '+ rc);\n    }\n  }\n  rowAndColumnChecker =(a)=>{\n    let RC = ['Row', 'Column'];\n    for(let k=0; k< RC.length; k++){\n      for(let i=0; i< a.length; i++){\n        let arr = [];\n        for(let j=0; j< a[i].length; j++){\n          let num = (RC[k] == 'Row') ?  a[i][j] : a[j][i];\n          if(num){arr.push(parseInt(num))}\n        }\n        this.checker(arr, i+1, RC[k]);\n      }\n    }\n\n  }\n\n  boxesChecker = (ar) => {\n    let A =[[0,1,2],[3,4,5],[6,7,8]];\n    let B =[[0,1,2],[3,4,5],[6,7,8]];\n\n    let boxNo = 0;\n    A.forEach(a =>{\n      B.forEach(b =>{\n        boxNo++;\n        let arr =[]\n        for(let i=0; i<3 ; i++){\n          for(let j=0; j<3 ; j++){\n            let num = ar[a[i]][b[j]] ;\n            if(num){arr.push(parseInt(num));\n              let n = a[i];\n              let m = b[j];\n            }\n          }\n        }\n        this.checker(arr, boxNo, 'box');\n      })\n    })\n  }\n\n  getValues = () =>{\n    let sudokoValues = [];\n    for(let i=1; i<10; i++){\n      let arr = [];\n      for(let j=1; j<10; j++){\n        let input = \"input[name=\" + '\"' + i + ',' + j +'\"]'; \n        let num = document.querySelectorAll( `${input}` )[0].value;\n        if(num){arr.push(parseInt(num))\n        }else {arr.push(null)}\n      }\n      sudokoValues.push(arr);\n    }\n    return(sudokoValues);\n    // console.log(sudokoValues);\n  }\n\n  onValidate = (e) =>{\n    console.time();\n    e.preventDefault();\n\n    let sudoko = this.getValues();\n    // console.log(sudoko);\n\n    for(let i=0; i< sudoko.length; i++){\n\n      for(let j=0; j< sudoko[i].length; j++){\n      //  console.log(sudoko[i][j]);\n      }\n\n    }\n    this.rowAndColumnChecker(sudoko);\n    this.boxesChecker(sudoko);\n    let ele = document.querySelectorAll('#message')[0];\n    ele.innerHTML = this.errors;\n    this.errors = '';\n  \nconsole.timeEnd();\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <form>\n          <Boxes Validate={this.onValidate} />\n        </form>\n        <div className=\"message\" id=\"message\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}